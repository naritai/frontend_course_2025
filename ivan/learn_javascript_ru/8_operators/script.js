"use strict"
// задание 1
let a = 1, b = 1;

let c = ++a; // префиксная форма - будет 2
let d = b++; // постфиксная форма - будет 2

// ошибся с 'd'
// d будет равно 1, потому что возвращается старая форма, но вот b теперь будет равно 2

//задание 2
"" + 1 + 0 // NaN
"" - 1 + 0 // NaN
true + false // true
6 / "3" // NaN
"2" * "3" // NaN
4 + 5 + "px" // NaN
"$" + 4 + 5 // NaN
"4" - 2 // NaN
"4px" - 2 // NaN
"  -9  " + 5 // -4
"  -9  " - 5 // -14
null + 1 // null
undefined + 1 // undefined
" \t \n" - 2 // NaN

// почти всё запорол...

"" + 1 + 0 // 1;
//ответ неверный...;

"" + 1 + 0 // тип данных string будет "10" - потому что если в выражении хотя бы 1 операнд это строка
// то всё выражение превращается в сроку;

"" - 1 + 0 // тип данных string будет "-1" - потому что сначала происходит ("" - 1) = "-1", а потом
// "-1" + 0 = "-1";
//ответ неверный...

"" - 1 + 0 // здесь нет конкатенации, потому что присутствует "-", поэтому
// "" - преобразуются в 0 (тк в скобках пусто - это 0) и тип данных становится number
// что равно 0 - 1 + 0 = -1

true + false // будет 1, тк true = 1, false = 0;

6 / "3" // будет "2", потому что если в выражении есть хотя бы 1 операнд в виде строки
// то всё выражение становится строкой;
// ответ неверный...;

6 / "3" // будет равно 2 - тип данных Number
// потому что в отличии от + (конкатенации в таких случаях), знак '/' преобразует строку
// в число и будет равно 2;

"2" * "3" // будет 6, аналогично как и с предыдущим. Происход превращение string в number
// и результат будет 6;

4 + 5 + "px" // по началу меня запутало слегка, но потом я понял
// будет равно "9px" - тип данных string;

"$" + 4 + 5 // будет также тип даннх string - "$9";
// ответ неверный...

"$" + 4 + 5 // тип данных string здесь будет, поэтому условно говоря всё выражение
// становится "$" + "4" + "5", что будет равно "$45";

"4" - 2 //тип данных number и будет равно 2;

"4px" - 2 //а здесь уже будет NaN, тк нельзя преобразовать "px" в число;

" -9 " + 5 // тип данных string и будет "-95";

" -9 " - 5 // тип данных number и будет -14;

null + 1 //будет null, тк если в выражении присутствует где-то null, то всё выражение
// становится null;
// ответ неверный...

null + 1 // null преобразуется в 0 и тип данных становится number, что равно 1;

undefined + 1 // будет undefined, потому что если в выражении есть undefined, то всё
// выражение становится undefined;
// ответ неверный...

undefined + 1 // undefined становится NaN после попытки преобразоваться в число, ответ NaN

" \t \n" - 2 //будет NaN, тк нельзя преобразовать " \t \n" в число;
// ответ неверный; 

" \t \n" - 2 // пробельный символы по сути равны 0 и тип данных здесь number
// что равно 0 - 2 = -2;



// задание 3
let e = prompt("Первое число?", 1);
let f = prompt("Второе число?", 2);

alert(e + f); // 12

//здесь нужно добавить '+' к переменным e и f, то бишь привести их к типу данных number

alert( +e + +f); //3